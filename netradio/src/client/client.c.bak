#include<stdio.h>
#include<stdlib.h>
#include<errno.h>
#include<unistd.h>
#include<getopt.h>
#include "client.h"
//#include "proto.h"
#include "../include/proto.h"
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netinet/ip.h>
#include<arpa/inet.h>
#include<net/if.h>
#include<sys/file.h>
#include<fcntl.h>

/*
*   -M --multigroup 指定多播组
*   -P --port       指定接收端口
*   -p --player     指定播放器
*   -H --help       显示帮助
**/

struct client_conf_st client_conf = {\
        .rcvport = DEFAULT_RCVPORT,\
        .mgroup = DEFAULT_MGROUP,\
        .player_cmd = DEFAULT_PLAYERCMD};

void print_help()
{
    printf("-M --multigroup 指定多播组 \n");
    printf("-P --port       指定接收端口\n");
    printf("-p --player     指定播放器\n");
    printf("-H --help       显示帮助\n");
}
static ssize_t writen(int fd, const uint8_t *buf, size_t len)
{
    int ret;
    int pos = 0;
    while(len > 0)
    {
        ret = write(fd, buf + pos, len);
        if(ret < 0)
        {
            if(errno == EINTR)
            {
                continue;
            }
            perror("writen()");
            exit(1);
        }
        len -= ret;
        pos += ret;
    }
    return pos;
}
int main(int argc, char** argv)
{
    pid_t pid;
    int pd[2];
    int val;
    int c;
    int sd;
    int recv_len;
    struct ip_mreqn mreq;
    int index = 0;
    int chosenid;
    struct sockaddr_in laddr, serveraddr, remoteaddr;
    socklen_t serveraddr_len, remoteaddr_len;
    struct option argarr[] = {{"port", 1, NULL,'P'},{"mgroup", 1, NULL, 'M'},\
                              {"player", 1, NULL, 'p'},{"help", 0, NULL, 'H'},\
                              {NULL, 0, NULL, 0}};
    /**
     * 初始化级别：默认值，配置文件，环境变量，命令行参数
     *
     * */
    while(1)
    {
        c = getopt_long(argc, argv,"P:M:p:H",argarr,&index);
        if(c < 0) break;
        switch(c)
        {
            case 'P':
                client_conf.rcvport = optarg;
                break;
            case 'M':
                client_conf.mgroup = optarg;
                break;
            case 'p':
                client_conf.player_cmd = optarg;
                break;
            case 'H':
                print_help();
                exit(0);
                break;
            default:
                abort();
                break;
        }
    }

    sd = socket(AF_INET,SOCK_DGRAM,0);
    if(sd < 0)
    {
        perror("socket()");
        exit(1);
    }
    inet_pton(AF_INET, client_conf.mgroup, &mreq.imr_multiaddr);
    /*if error*/

    inet_pton(AF_INET, "0.0.0.0", &mreq.imr_address);
    /*if error*/

    mreq.imr_ifindex = if_nametoindex("eth0");    //网卡设备名称和索引之间的映射
    /*if error*/
    //添加多播地址
    if(setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq)) < 0)
    {
        perror("setsockopt()");
        exit(1);
    }

    val = 1;
    if(setsockopt(sd, IPPROTO_IP, IP_MULTICAST_LOOP, &val, sizeof(val)))
    {
        perror("setsockopt()");
        exit(0);
    }
    //绑定本地地址
    laddr.sin_family = AF_INET;
    laddr.sin_port = htons(atoi(client_conf.rcvport));
    inet_pton(AF_INET, "0.0.0.0",&laddr.sin_addr.s_addr);
    if(bind(sd, (void*)&laddr, sizeof(laddr)) < 0 )
    {
        perror("bind()");
        exit(1);
    }

    if(pipe(pd) < 0)
    {
        perror("pipe()");
        exit(1);
    }

    pid = fork();
    if(pid < 0)
    {
        perror("fork()");
        exit(1);
    }
    else if(pid == 0)
    {
        //子进程：调用解码器
        close(sd);
        close(pd[1]);
        dup2(pd[0],STDIN_FILENO);
        if(pd[0] > STDIN_FILENO)
        {
            close(pd[0]);
        }
        execl("/bin/sh", "sh", "-c", client_conf.player_cmd, NULL);
        perror("execl()");
        exit(1);
    }
    //父进程：从网络上收包，发送给子进程
    //收节目单
    struct msg_list_st *msg_list; 
    
    msg_list = malloc(MSG_LIST_MAX);
    if(msg_list == NULL)
    {
        perror("malloc()");
        exit(1);
    }
    serveraddr_len = sizeof(struct sockaddr_in);
    while(1)
    {
        recv_len = recvfrom(sd, msg_list, MSG_LIST_MAX, 0, (void *)&serveraddr, &serveraddr_len);
        if(recv_len < sizeof(struct msg_list_st))
        {
            fprintf(stderr, "message is too small.\n");
            continue;
        }
        if(msg_list->chnid != LISTCHNID)
        {
            fprintf(stderr,"chnid is not match.\n");
            continue;
        }
        break;
    }
    //打印节目单并选择频道
    struct msg_listentry_st *pos;
    for(pos = msg_list->entry; (char *)pos < ((char *)msg_list) + recv_len; pos = (void *)(((char *)pos) + ntohs(pos->len)))
    {
        printf("channel %d: %s\n",pos->chnid, pos->desc);
    }
    free(msg_list);
    while(scanf("%d",&chosenid) != 1)
    {
        exit(1);
    }
    
    //收频道包，发送给子进程
    struct msg_channel_st *msg_channel;
    msg_channel = malloc(MSG_CHANNEL_MAX);
    if(msg_channel == NULL)
    {
        perror("malloc()");
        exit(1);
    }
    remoteaddr_len = sizeof(struct sockaddr_in);
    while(1)
    {
        recv_len = recvfrom(sd, msg_channel, MSG_CHANNEL_MAX, 0, (void *)&remoteaddr, &remoteaddr_len);
        if(remoteaddr.sin_addr.s_addr != serveraddr.sin_addr.s_addr || remoteaddr.sin_port != serveraddr.sin_port)
        {
            fprintf(stderr, "IGnore:address not match.\n");
            continue;
        }
        if(recv_len < sizeof(struct msg_channel_st))
        {
            fprintf(stderr,"Ignore: message is too small.\n");
        }
        if(msg_channel->chnid == chosenid)
        {
            fprintf(stdout, "accepted message: %d recieved.\n",msg_channel->chnid);
            if(writen(pd[1], msg_channel->data, recv_len - sizeof(chnid_t)) < 0)
            {
                exit(1);
            }
        }
    }
    free(msg_channel);
    close(sd);
    exit(0);
}